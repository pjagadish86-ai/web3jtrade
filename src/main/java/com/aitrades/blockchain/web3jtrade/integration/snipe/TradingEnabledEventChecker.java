package com.aitrades.blockchain.web3jtrade.integration.snipe;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class TradingEnabledEventChecker extends Contract {
    public static final String BINARY = "608060405269d3c21bcecceda1000000600681905562000022906000196200058b565b620000309060001962000528565b60079081556040805180820190915281815266233932b2a1272160c91b60209091019081526200006491600a919062000450565b50604080518082019091526004808252632321272160e11b60209092019182526200009291600b9162000450565b50600c805460ff191660091790556000600d819055600e8190556028600f8190556010556096601181905560125569065a4da25d3016c00000601355690cb49b44ba602d80000060145569010f0cf064dd592000006015556017819055601855602380547a0100000000010010ed43c718714eb63d5aa57b78b54704e256024e7fffffffffff000000000000ff00000000000000000000000000000000000000009091161790553480156200014657600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600380546001600160a01b0319163390811790915560405181906000907f95c4a9510afb68f721833e1e2aee2035604523dce5d6b9a4031b98420bfcf9ee908290a3506007543360009081526019602090815260409182902092909255602354815163c45a015560e01b815291516001600160a01b0390911692839263c45a01559260048083019392829003018186803b1580156200022657600080fd5b505afa1580156200023b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002619190620004f6565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015620002aa57600080fd5b505afa158015620002bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e59190620004f6565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b1580156200032e57600080fd5b505af115801562000343573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003699190620004f6565b602280546001600160a01b03199081166001600160a01b0393841617909155602180549091169183169190911790556001601d6000620003b16000546001600160a01b031690565b6001600160a01b0316815260208082019290925260409081016000908120805494151560ff19958616179055308152601d909252902080549091166001179055620003f93390565b6001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040516200044191815260200190565b60405180910390a350620005ae565b8280546200045e906200054e565b90600052602060002090601f016020900481019282620004825760008555620004cd565b82601f106200049d57805160ff1916838001178555620004cd565b82800160010185558215620004cd579182015b82811115620004cd578251825591602001919060010190620004b0565b50620004db929150620004df565b5090565b5b80821115620004db5760008155600101620004e0565b6000602082840312156200050957600080fd5b81516001600160a01b03811681146200052157600080fd5b9392505050565b6000828210156200054957634e487b7160e01b600052601160045260246000fd5b500390565b600181811c908216806200056357607f821691505b602082108114156200058557634e487b7160e01b600052602260045260246000fd5b50919050565b600082620005a957634e487b7160e01b600052601260045260246000fd5b500690565b6141bc80620005be6000396000f3fe60806040526004361061042a5760003560e01c806359992dbc11610229578063a9059cbb1161012e578063dcd747d5116100b6578063ea2f0b371161007a578063ea2f0b3714610cd2578063f0f165af14610cf2578063f2fde38b14610d12578063fc7be37b14610d32578063fdf8c74014610d5257600080fd5b8063dcd747d514610c17578063dd46706414610c2c578063dd62ed3e14610c4c578063de4c785514610c92578063e5dffed314610cb257600080fd5b8063c49b9a80116100fd578063c49b9a8014610b6b578063c884ef8314610b8b578063d54ad2a114610bc1578063d7aeee0714610bd6578063d9e6646014610bf757600080fd5b8063a9059cbb14610af5578063b3f22ce314610b15578063bbff034a14610b2b578063c2e5ec0414610b4b57600080fd5b806388f82020116101b15780639ce8c4ff116101805780639ce8c4ff14610a52578063a22d483214610a67578063a3ef6c4014610a87578063a457c2d714610ac0578063a69df4b514610ae057600080fd5b806388f82020146109d15780638a8c523c14610a0a5780638da5cb5b14610a1f57806395d89b4114610a3d57600080fd5b806370a08231116101f857806370a0823114610946578063715018a61461096657806378109e541461097b5780637d59f43c146109915780637e5583b8146109b157600080fd5b806359992dbc146108c55780635e3ffee6146108e5578063602bc62b1461091b5780636bc87c3a1461093057600080fd5b8063313ce5671161032f5780634549b039116102b757806351fde4bb1161028657806351fde4bb1461081657806352390c021461082c578063528928841461084c5780635342acb41461086c578063594e5a14146108a557600080fd5b80634549b0391461079f57806345993a1e146107bf5780634a74bb02146107d45780634ada218b146107f557600080fd5b806339509351116102fe57806339509351146107095780633b124fe7146107295780633bd5d1731461073f57806341cb87fc1461075f578063437823ec1461077f57600080fd5b8063313ce5671461068757806333443cda146106a95780633685d419146106c9578063393ca001146106e957600080fd5b8063169b2623116103b257806323b872dd1161038157806323b872dd146105d457806323d61817146105f457806325a64e8e146106145780632d838119146106465780632ef998c01461066657600080fd5b8063169b26231461055f578063176882231461057f57806318160ddd1461059f5780631e83409a146105b457600080fd5b8063095ea7b3116103f9578063095ea7b3146104c35780630d6f4c00146104f35780630e15561a1461051457806313114a9d1461052957806316653fee1461053e57600080fd5b806301681a6214610436578063053fd4e51461045857806306fdde03146104815780630700037d146104a357600080fd5b3661043157005b600080fd5b34801561044257600080fd5b50610456610451366004613ca5565b610d67565b005b34801561046457600080fd5b5061046e60135481565b6040519081526020015b60405180910390f35b34801561048d57600080fd5b50610496610e4b565b6040516104789190613e13565b3480156104af57600080fd5b5061046e6104be366004613ca5565b610edd565b3480156104cf57600080fd5b506104e36104de366004613d59565b610f73565b6040519015158152602001610478565b3480156104ff57600080fd5b506023546104e390600160c01b900460ff1681565b34801561052057600080fd5b5060185461046e565b34801561053557600080fd5b5060085461046e565b34801561054a57600080fd5b506023546104e390600160d01b900460ff1681565b34801561056b57600080fd5b5061045661057a366004613ca5565b610f8a565b34801561058b57600080fd5b5061045661059a366004613da0565b610fd8565b3480156105ab57600080fd5b5060065461046e565b3480156105c057600080fd5b506104566105cf366004613ca5565b611007565b3480156105e057600080fd5b506104e36105ef366004613d18565b611195565b34801561060057600080fd5b5061045661060f366004613d85565b6111fe565b34801561062057600080fd5b506003546001600160a01b03165b6040516001600160a01b039091168152602001610478565b34801561065257600080fd5b5061046e610661366004613da0565b611295565b34801561067257600080fd5b506023546104e390600160b81b900460ff1681565b34801561069357600080fd5b50600c5460405160ff9091168152602001610478565b3480156106b557600080fd5b506104566106c4366004613da0565b611319565b3480156106d557600080fd5b506104566106e4366004613ca5565b611348565b3480156106f557600080fd5b50610456610704366004613d85565b611502565b34801561071557600080fd5b506104e3610724366004613d59565b61158e565b34801561073557600080fd5b5061046e600d5481565b34801561074b57600080fd5b5061045661075a366004613da0565b6115c4565b34801561076b57600080fd5b5061045661077a366004613ca5565b6116ae565b34801561078b57600080fd5b5061045661079a366004613ca5565b61170f565b3480156107ab57600080fd5b5061046e6107ba366004613db9565b61175d565b3480156107cb57600080fd5b506104566117ea565b3480156107e057600080fd5b506023546104e390600160a81b900460ff1681565b34801561080157600080fd5b506023546104e390600160b01b900460ff1681565b34801561082257600080fd5b5061046e60115481565b34801561083857600080fd5b50610456610847366004613ca5565b6118b6565b34801561085857600080fd5b5060225461062e906001600160a01b031681565b34801561087857600080fd5b506104e3610887366004613ca5565b6001600160a01b03166000908152601d602052604090205460ff1690565b3480156108b157600080fd5b506104566108c0366004613d85565b611a08565b3480156108d157600080fd5b506104566108e0366004613da0565b611a65565b3480156108f157600080fd5b5061046e610900366004613ca5565b6001600160a01b031660009081526016602052604090205490565b34801561092757600080fd5b5060025461046e565b34801561093c57600080fd5b5061046e600f5481565b34801561095257600080fd5b5061046e610961366004613ca5565b611ac4565b34801561097257600080fd5b50610456611b23565b34801561098757600080fd5b5061046e60145481565b34801561099d57600080fd5b506104566109ac366004613ca5565b611b85565b3480156109bd57600080fd5b506104566109cc366004613ca5565b611f21565b3480156109dd57600080fd5b506104e36109ec366004613ca5565b6001600160a01b03166000908152601f602052604090205460ff1690565b348015610a1657600080fd5b50610456611ffe565b348015610a2b57600080fd5b506000546001600160a01b031661062e565b348015610a4957600080fd5b50610496612080565b348015610a5e57600080fd5b5060055461046e565b348015610a7357600080fd5b50610456610a82366004613ca5565b61208f565b348015610a9357600080fd5b506104e3610aa2366004613ca5565b6001600160a01b03166000908152601e602052604090205460ff1690565b348015610acc57600080fd5b506104e3610adb366004613d59565b6120f0565b348015610aec57600080fd5b5061045661213f565b348015610b0157600080fd5b506104e3610b10366004613d59565b612209565b348015610b2157600080fd5b5061046e60155481565b348015610b3757600080fd5b50610456610b46366004613d85565b612216565b348015610b5757600080fd5b50610456610b66366004613d85565b6122a2565b348015610b7757600080fd5b50610456610b86366004613d85565b612319565b348015610b9757600080fd5b5061046e610ba6366004613ca5565b6001600160a01b03166000908152601b602052604090205490565b348015610bcd57600080fd5b5060095461046e565b348015610be257600080fd5b506023546104e390600160c81b900460ff1681565b348015610c0357600080fd5b5060235461062e906001600160a01b031681565b348015610c2357600080fd5b5060175461046e565b348015610c3857600080fd5b50610456610c47366004613da0565b6123a5565b348015610c5857600080fd5b5061046e610c67366004613cdf565b6001600160a01b039182166000908152601c6020908152604080832093909416825291909152205490565b348015610c9e57600080fd5b50610456610cad366004613ca5565b61242a565b348015610cbe57600080fd5b5060215461062e906001600160a01b031681565b348015610cde57600080fd5b50610456610ced366004613ca5565b612475565b348015610cfe57600080fd5b50610456610d0d366004613da0565b6124c0565b348015610d1e57600080fd5b50610456610d2d366004613ca5565b612504565b348015610d3e57600080fd5b50610456610d4d366004613da0565b6125dc565b348015610d5e57600080fd5b50610456612661565b6003546001600160a01b0316331480610d8a57506000546001600160a01b031633145b610daf5760405162461bcd60e51b8152600401610da690613e68565b60405180910390fd5b6000816001600160a01b03164760405160006040518083038185875af1925050503d8060008114610dfc576040519150601f19603f3d011682016040523d82523d6000602084013e610e01565b606091505b5050905080610e425760405162461bcd60e51b815260206004820152600d60248201526c21b632b0b7103330b4b632b21760991b6044820152606401610da6565b50506000601855565b6060600a8054610e5a9061404c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e869061404c565b8015610ed35780601f10610ea857610100808354040283529160200191610ed3565b820191906000526020600020905b815481529060010190602001808311610eb657829003601f168201915b5050505050905090565b600080610ef7610eee61dead611ac4565b600654906126c3565b90506000610f1a82610f14610f0b87611ac4565b60185490612705565b90612784565b6001600160a01b0385166000908152601b6020526040902054909150811115610f69576001600160a01b0384166000908152601b6020526040902054610f619082906126c3565b949350505050565b5060009392505050565b6000610f803384846127c6565b5060015b92915050565b6000546001600160a01b03163314610fb45760405162461bcd60e51b8152600401610da690613ef3565b6001600160a01b03166000908152601e60205260409020805460ff19166001179055565b6000546001600160a01b031633146110025760405162461bcd60e51b8152600401610da690613ef3565b600d55565b6017541561119257600061101f610eee61dead611ac4565b9050600061103382610f14610f0b86611ac4565b6001600160a01b0384166000908152601b602052604090205490915081116110945760405162461bcd60e51b81526020600482015260146024820152732737ba1032b737bab3b4103a379031b630b4b69760611b6044820152606401610da6565b6001600160a01b0383166000908152601b60205260408120546110b89083906126c3565b6001600160a01b0385166000908152601b60205260409020549091506110de90826128ea565b6001600160a01b0385166000818152601b602052604080822093909355915183908381818185875af1925050503d8060008114611137576040519150601f19603f3d011682016040523d82523d6000602084013e61113c565b606091505b505090508061117d5760405162461bcd60e51b815260206004820152600d60248201526c21b630b4b6903330b4b632b21760991b6044820152606401610da6565b60095461118a90836128ea565b600955505050505b50565b60006111a2848484612949565b6111f484336111ef856040518060600160405280602881526020016140fa602891396001600160a01b038a166000908152601c602090815260408083203384529091529020549190612eab565b6127c6565b5060019392505050565b6003546001600160a01b031633148061122157506000546001600160a01b031633145b61123d5760405162461bcd60e51b8152600401610da690613e68565b60238054821515600160b81b0260ff60b81b199091161790556040517fb4dde6e4520f2d9ed74beef45f8eb9db3027a871e820f1dd3bf0ed59f5f24ebf9061128a90831515815260200190565b60405180910390a150565b60006007548211156112fc5760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201526965666c656374696f6e7360b01b6064820152608401610da6565b6000611306612ee5565b90506113128382612784565b9392505050565b6000546001600160a01b031633146113435760405162461bcd60e51b8152600401610da690613ef3565b600f55565b6000546001600160a01b031633146113725760405162461bcd60e51b8152600401610da690613ef3565b6001600160a01b0381166000908152601f602052604090205460ff166113da5760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c7564656400000000006044820152606401610da6565b60005b6020548110156114fe57816001600160a01b031660208281548110611404576114046140ce565b6000918252602090912001546001600160a01b031614156114ec576020805461142f90600190614035565b8154811061143f5761143f6140ce565b9060005260206000200160009054906101000a90046001600160a01b031660208281548110611470576114706140ce565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559184168152601a82526040808220829055601f83529020805460ff191690558054806114c6576114c66140b8565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b806114f681614087565b9150506113dd565b5050565b6003546001600160a01b031633148061152557506000546001600160a01b031633145b6115415760405162461bcd60e51b8152600401610da690613e68565b60238054821515600160c81b0260ff60c81b199091161790556040517ff464392e7f7ab74e43063c14fdac92dc245351da604f9cfe7f7a17a483ba39d09061128a90831515815260200190565b336000818152601c602090815260408083206001600160a01b03871684529091528120549091610f809185906111ef90866128ea565b336000818152601f602052604090205460ff16156116395760405162461bcd60e51b815260206004820152602c60248201527f4578636c75646564206164647265737365732063616e6e6f742063616c6c207460448201526b3434b990333ab731ba34b7b760a11b6064820152608401610da6565b600061164483612f08565b505050506001600160a01b038416600090815260196020526040902054919250611670919050826126c3565b6001600160a01b03831660009081526019602052604090205560075461169690826126c3565b6007556008546116a690846128ea565b600855505050565b6003546001600160a01b03163314806116d157506000546001600160a01b031633145b6116ed5760405162461bcd60e51b8152600401610da690613e68565b602380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146117395760405162461bcd60e51b8152600401610da690613ef3565b6001600160a01b03166000908152601d60205260409020805460ff19166001179055565b60006006548311156117b15760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e74206d757374206265206c657373207468616e20737570706c79006044820152606401610da6565b816117d05760006117c184612f08565b50939550610f84945050505050565b60006117db84612f08565b50929550610f84945050505050565b6004546001600160a01b031633146118145760405162461bcd60e51b8152600401610da690613f28565b60055442116118655760405162461bcd60e51b815260206004820152601f60248201527f436f6e7472616374206973206c6f636b656420756e74696c20372064617973006044820152606401610da6565b6004546003546040516001600160a01b03928316929091169060008051602061414283398151915290600090a3600454600380546001600160a01b0319166001600160a01b03909216919091179055565b6000546001600160a01b031633146118e05760405162461bcd60e51b8152600401610da690613ef3565b6001600160a01b0381166000908152601f602052604090205460ff16156119495760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c7564656400000000006044820152606401610da6565b6001600160a01b038116600090815260196020526040902054156119a3576001600160a01b03811660009081526019602052604090205461198990611295565b6001600160a01b0382166000908152601a60205260409020555b6001600160a01b03166000818152601f602090815260408220805460ff191660019081179091558154908101825591527fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb0180546001600160a01b0319169091179055565b6003546001600160a01b0316331480611a2b57506000546001600160a01b031633145b611a475760405162461bcd60e51b8152600401610da690613e68565b60238054911515600160d01b0260ff60d01b19909216919091179055565b6003546001600160a01b0316331480611a8857506000546001600160a01b031633145b611aa45760405162461bcd60e51b8152600401610da690613e68565b611abe6064610f148360065461270590919063ffffffff16565b60135550565b6001600160a01b0381166000908152601f602052604081205460ff1615611b0157506001600160a01b03166000908152601a602052604090205490565b6001600160a01b038216600090815260196020526040902054610f8490611295565b6000546001600160a01b03163314611b4d5760405162461bcd60e51b8152600401610da690613ef3565b600080546040516001600160a01b0390911690600080516020614122833981519152908390a3600080546001600160a01b0319169055565b6003546001600160a01b0316331480611ba857506000546001600160a01b031633145b611bc45760405162461bcd60e51b8152600401610da690613e68565b611bcd816116ae565b6023546040805163c45a015560e01b815290516001600160a01b0390921691829163c45a0155916004808301926020929190829003018186803b158015611c1357600080fd5b505afa158015611c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4b9190613cc2565b6001600160a01b031663e6a4390530836001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015611c9357600080fd5b505afa158015611ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccb9190613cc2565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b158015611d1157600080fd5b505afa158015611d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d499190613cc2565b602280546001600160a01b0319166001600160a01b03929092169182179055611efe57806001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611da557600080fd5b505afa158015611db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddd9190613cc2565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015611e2557600080fd5b505afa158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d9190613cc2565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b158015611ea557600080fd5b505af1158015611eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edd9190613cc2565b602280546001600160a01b0319166001600160a01b03929092169190911790555b602180546001600160a01b0319166001600160a01b039290921691909117905550565b6003546001600160a01b03163314611f4b5760405162461bcd60e51b8152600401610da690613eaf565b6001600160a01b038116611fb45760405162461bcd60e51b815260206004820152602a60248201527f4a616e697461626c653a206e6577206a616e69746f7220697320746865207a65604482015269726f206164647265737360b01b6064820152608401610da6565b6003546040516001600160a01b0380841692169060008051602061414283398151915290600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031633148061202157506000546001600160a01b031633145b61203d5760405162461bcd60e51b8152600401610da690613e68565b6023805460ff60b01b19169055604051600181527fbeda7dca7bc1b3e80b871f4818129ec73b771581f803d553aeb3484098e5f65a9060200160405180910390a1565b6060600b8054610e5a9061404c565b6003546001600160a01b03163314806120b257506000546001600160a01b031633145b6120ce5760405162461bcd60e51b8152600401610da690613e68565b602280546001600160a01b0319166001600160a01b0392909216919091179055565b6000610f8033846111ef8560405180606001604052806025815260200161416260259139336000908152601c602090815260408083206001600160a01b038d1684529091529020549190612eab565b6001546001600160a01b031633146121695760405162461bcd60e51b8152600401610da690613f28565b60025442116121ba5760405162461bcd60e51b815260206004820152601f60248201527f436f6e7472616374206973206c6f636b656420756e74696c20372064617973006044820152606401610da6565b600154600080546040516001600160a01b03938416939091169160008051602061412283398151915291a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b6000610f80338484612949565b6003546001600160a01b031633148061223957506000546001600160a01b031633145b6122555760405162461bcd60e51b8152600401610da690613e68565b60238054821515600160c01b0260ff60c01b199091161790556040517f2529470dc3534568b63d2fbcd7a679722b00613b79950fbba2db313529cc4c009061128a90831515815260200190565b6000546001600160a01b031633146122cc5760405162461bcd60e51b8152600401610da690613ef3565b60238054821515600160b01b0260ff60b01b199091161790556040517fbeda7dca7bc1b3e80b871f4818129ec73b771581f803d553aeb3484098e5f65a9061128a90831515815260200190565b6003546001600160a01b031633148061233c57506000546001600160a01b031633145b6123585760405162461bcd60e51b8152600401610da690613e68565b60238054821515600160a81b0260ff60a81b199091161790556040517f53726dfcaf90650aa7eb35524f4d3220f07413c8d6cb404cc8c18bf5591bc1599061128a90831515815260200190565b6000546001600160a01b031633146123cf5760405162461bcd60e51b8152600401610da690613ef3565b60008054600180546001600160a01b03199081166001600160a01b038416179091551690556123fe8142613fdc565b600255600080546040516001600160a01b0390911690600080516020614122833981519152908390a350565b6000546001600160a01b031633146124545760405162461bcd60e51b8152600401610da690613ef3565b6001600160a01b03166000908152601e60205260409020805460ff19169055565b6000546001600160a01b0316331461249f5760405162461bcd60e51b8152600401610da690613ef3565b6001600160a01b03166000908152601d60205260409020805460ff19169055565b6003546001600160a01b03163314806124e357506000546001600160a01b031633145b6124ff5760405162461bcd60e51b8152600401610da690613e68565b601555565b6000546001600160a01b0316331461252e5760405162461bcd60e51b8152600401610da690613ef3565b6001600160a01b0381166125935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610da6565b600080546040516001600160a01b038085169392169160008051602061412283398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031633146126065760405162461bcd60e51b8152600401610da690613eaf565b60038054600480546001600160a01b03199081166001600160a01b038416179091551690556126358142613fdc565b6005556003546040516000916001600160a01b031690600080516020614142833981519152908390a350565b6003546001600160a01b0316331461268b5760405162461bcd60e51b8152600401610da690613eaf565b6003546040516000916001600160a01b031690600080516020614142833981519152908390a3600380546001600160a01b0319169055565b600061131283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612eab565b60008261271457506000610f84565b60006127208385614016565b90508261272d8583613ff4565b146113125760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610da6565b600061131283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612f57565b6001600160a01b0383166128285760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610da6565b6001600160a01b0382166128895760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610da6565b6001600160a01b038381166000818152601c602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000806128f78385613fdc565b9050838110156113125760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610da6565b6001600160a01b0383166129ad5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610da6565b6001600160a01b038216612a0f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610da6565b6001600160a01b0383166000908152601e602052604090205460ff1615612a785760405162461bcd60e51b815260206004820152601d60248201527f4a616e6e6e6969696565656565656565656565656565656565656573210000006044820152606401610da6565b60008111612ada5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610da6565b6000546001600160a01b03848116911614801590612b0657506000546001600160a01b03838116911614155b8015612b2057506003546001600160a01b03848116911614155b8015612b3a57506003546001600160a01b03838116911614155b15612cd157602354600160b01b900460ff16612b915760405162461bcd60e51b8152602060048201526016602482015275151c98591a5b99c81a5cc81b9bdd08195b98589b195960521b6044820152606401610da6565b6001600160a01b03821615801590612bb457506001600160a01b03821661dead14155b8015612bc957506001600160a01b0383163014155b8015612bde57506001600160a01b0382163014155b15612cd1576022546001600160a01b03838116911614612c6e5760145481612c0584611ac4565b612c0f9190613fdc565b1115612c695760405162461bcd60e51b8152602060048201526024808201527f45786365656473206d6178696d756d2077616c6c657420746f6b656e20616d6f6044820152633ab73a1760e11b6064820152608401610da6565b612cd1565b601354811115612cd15760405162461bcd60e51b815260206004820152602860248201527f5472616e7366657220616d6f756e74206578636565647320746865206d6178546044820152673c20b6b7bab73a1760c11b6064820152608401610da6565b6022546001600160a01b0384811691161415612d3857601754612cf490826128ea565b6017556001600160a01b038216600090815260166020526040902054612d1a90826128ea565b6001600160a01b038316600090815260166020526040902055612d90565b6022546001600160a01b0383811691161415612d90576001600160a01b038316600090815260166020526040902054601754612d73916126c3565b6017556001600160a01b0383166000908152601660205260408120555b6000612d9b30611ac4565b90506013548110612dab57506013545b60155481108015908190612dc95750602354600160a01b900460ff16155b8015612de357506022546001600160a01b03868116911614155b8015612e295750602354600160c81b900460ff1680612e2957506023546001600160a01b03868116911614801590612e2957506023546001600160a01b03858116911614155b8015612e3e5750602354600160a81b900460ff165b15612e4c57612e4c82612f85565b6001600160a01b0385166000908152601d602052604090205460019060ff1680612e8e57506001600160a01b0385166000908152601d602052604090205460ff165b15612e97575060005b612ea386868684613089565b505050505050565b60008184841115612ecf5760405162461bcd60e51b8152600401610da69190613e13565b506000612edc8486614035565b95945050505050565b6000806000612ef2613244565b9092509050612f018282612784565b9250505090565b6000806000806000806000806000612f1f8a6133c6565b9250925092506000806000612f3d8d8686612f38612ee5565b613408565b919f909e50909c50959a5093985091965092945050505050565b60008183612f785760405162461bcd60e51b8152600401610da69190613e13565b506000612edc8486613ff4565b6023805460ff60a01b1916600160a01b179055601154600f54600091612fab91906128ea565b90506000612fcd6002610f1484610f14600f548861270590919063ffffffff16565b905082811015613077576000612fe384836126c3565b905047612fef82613458565b6000612ffb47836126c3565b9050600061300d84610f148488612705565b9050600061301b83836126c3565b60185490915061302b90826128ea565b60185561303886836135b9565b60408051878152602081018490527f28fc98272ce761178794ad6768050fea1648e07f1e2ffe15afd3a290f8381486910160405180910390a150505050505b50506023805460ff60a01b1916905550565b600d54600f54826130a15761309c61369d565b6130c5565b602354600160c01b900460ff16156130c5576130bc846136e2565b600d819055600f555b6001600160a01b0386166000908152601f602052604090205460ff16801561310657506001600160a01b0385166000908152601f602052604090205460ff16155b1561311b576131168686866137a2565b613219565b6001600160a01b0386166000908152601f602052604090205460ff1615801561315c57506001600160a01b0385166000908152601f602052604090205460ff165b1561316c576131168686866138d0565b6001600160a01b0386166000908152601f602052604090205460ff161580156131ae57506001600160a01b0385166000908152601f602052604090205460ff16155b156131be57613116868686613981565b6001600160a01b0386166000908152601f602052604090205460ff1680156131fe57506001600160a01b0385166000908152601f602052604090205460ff165b1561320e576131168686866139cd565b613219868686613981565b8261323557613235600e54600d55601054600f55601254601155565b600d91909155600f5550505050565b6007546006546000918291825b60205481101561339657826019600060208481548110613273576132736140ce565b60009182526020808320909101546001600160a01b0316835282019290925260400190205411806132de575081601a6000602084815481106132b7576132b76140ce565b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b156132f457600754600654945094505050509091565b61333a601960006020848154811061330e5761330e6140ce565b60009182526020808320909101546001600160a01b0316835282019290925260400190205484906126c3565b9250613382601a600060208481548110613356576133566140ce565b60009182526020808320909101546001600160a01b0316835282019290925260400190205483906126c3565b91508061338e81614087565b915050613251565b506006546007546133a691612784565b8210156133bd576007546006549350935050509091565b90939092509050565b6000806000806133d585613a48565b905060006133e286613a65565b905060006133fa826133f489866126c3565b906126c3565b979296509094509092505050565b60008080806134178886612705565b905060006134258887612705565b905060006134338888612705565b90506000613445826133f486866126c3565b939b939a50919850919650505050505050565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061348d5761348d6140ce565b6001600160a01b03928316602091820292909201810191909152602154604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b1580156134e157600080fd5b505afa1580156134f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135199190613cc2565b8160018151811061352c5761352c6140ce565b6001600160a01b03928316602091820292909201015260215461355291309116846127c6565b60215460405163791ac94760e01b81526001600160a01b039091169063791ac9479061358b908590600090869030904290600401613f6b565b600060405180830381600087803b1580156135a557600080fd5b505af1158015612ea3573d6000803e3d6000fd5b6021546135d19030906001600160a01b0316846127c6565b6021546001600160a01b031663f305d7198230856000806135fa6003546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c4016060604051808303818588803b15801561365d57600080fd5b505af1158015613671573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906136969190613de5565b5050505050565b600d541580156136ad5750600f54155b80156136b95750601154155b156136c057565b600d8054600e55600f8054601055601180546012556000928390559082905555565b6000806136f3610eee61dead611ac4565b905060008061370983610f1487620f4240612705565b90506064811161371c576002915061378c565b60fa811161372d576004915061378c565b6101f4811161373f576006915061378c565b6103e88111613751576008915061378c565b6109c4811161376357600a915061378c565b611388811161377557600c915061378c565b6127108111613787576010915061378c565b601491505b612edc600a61379c846002612784565b90612705565b6000806000806000806137b487612f08565b9550955095509550955095506137cb898989613a91565b6001600160a01b0389166000908152601a60205260409020546137ee90886126c3565b6001600160a01b038a166000908152601a602090815260408083209390935560199052205461381d90876126c3565b6001600160a01b03808b1660009081526019602052604080822093909355908a168152205461384c90866128ea565b6001600160a01b03891660009081526019602052604090205561386e81613be4565b6138788483613c6c565b876001600160a01b0316896001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516138bd91815260200190565b60405180910390a3505050505050505050565b6000806000806000806138e287612f08565b9550955095509550955095506138f9898989613a91565b6001600160a01b03891660009081526019602052604090205461391c90876126c3565b6001600160a01b03808b16600090815260196020908152604080832094909455918b168152601a909152205461395290846128ea565b6001600160a01b0389166000908152601a602090815260408083209390935560199052205461384c90866128ea565b60008060008060008061399387612f08565b9550955095509550955095506139aa898989613a91565b6001600160a01b03891660009081526019602052604090205461381d90876126c3565b6000806000806000806139df87612f08565b9550955095509550955095506139f6898989613a91565b6001600160a01b0389166000908152601a6020526040902054613a1990886126c3565b6001600160a01b038a166000908152601a602090815260408083209390935560199052205461391c90876126c3565b6000610f846103e8610f14600d548561270590919063ffffffff16565b600080613a7f601154600f546128ea90919063ffffffff16565b90506113126103e8610f148584612705565b602354600160d01b900460ff1615613bdf576000613aae84611ac4565b11613af25760405162461bcd60e51b8152602060048201526014602482015273253ab9ba1036b0b5b4b7339039bab9329017171760611b6044820152606401610da6565b6000613b23613b0085611ac4565b6001600160a01b0386166000908152601b6020526040902054610f149085612705565b6001600160a01b0385166000908152601b6020526040902054909150811015613b87576001600160a01b0384166000908152601b6020526040902054613b6990826126c3565b6001600160a01b0385166000908152601b6020526040902055613ba1565b6001600160a01b0384166000908152601b60205260408120555b6001600160a01b0383166000908152601b6020526040902054613bc490826128ea565b6001600160a01b0384166000908152601b6020526040902055505b505050565b6000613bee612ee5565b90506000613bfc8383612705565b30600090815260196020526040902054909150613c1990826128ea565b30600090815260196020908152604080832093909355601f9052205460ff1615613bdf57306000908152601a6020526040902054613c5790846128ea565b306000908152601a6020526040902055505050565b600754613c7990836126c3565b600755600854613c8990826128ea565b6008555050565b80358015158114613ca057600080fd5b919050565b600060208284031215613cb757600080fd5b8135611312816140e4565b600060208284031215613cd457600080fd5b8151611312816140e4565b60008060408385031215613cf257600080fd5b8235613cfd816140e4565b91506020830135613d0d816140e4565b809150509250929050565b600080600060608486031215613d2d57600080fd5b8335613d38816140e4565b92506020840135613d48816140e4565b929592945050506040919091013590565b60008060408385031215613d6c57600080fd5b8235613d77816140e4565b946020939093013593505050565b600060208284031215613d9757600080fd5b61131282613c90565b600060208284031215613db257600080fd5b5035919050565b60008060408385031215613dcc57600080fd5b82359150613ddc60208401613c90565b90509250929050565b600080600060608486031215613dfa57600080fd5b8351925060208401519150604084015190509250925092565b600060208083528351808285015260005b81811015613e4057858101830151858201604001528201613e24565b81811115613e52576000604083870101525b50601f01601f1916929092016040019392505050565b60208082526027908201527f43616c6c6572206973206e6f7420746865206a616e69746f72206f72207468656040820152661037bbb732b91760c91b606082015260800190565b60208082526024908201527f4a616e697461626c653a2063616c6c6572206973206e6f7420746865206a616e60408201526334ba37b960e11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526023908201527f596f7520646f6e27742068617665207065726d697373696f6e20746f20756e6c6040820152626f636b60e81b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015613fbb5784516001600160a01b031683529383019391830191600101613f96565b50506001600160a01b03969096166060850152505050608001529392505050565b60008219821115613fef57613fef6140a2565b500190565b60008261401157634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615614030576140306140a2565b500290565b600082821015614047576140476140a2565b500390565b600181811c9082168061406057607f821691505b6020821081141561408157634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561409b5761409b6140a2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461119257600080fdfe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63658be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e095c4a9510afb68f721833e1e2aee2035604523dce5d6b9a4031b98420bfcf9ee45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122075730a0576cf3337c4606a4ed3805cf9a63a5231e4fb94ac9f5d43860fcf4cc764736f6c63430008060033";

    public static final String FUNC__LIQUIDITYFEE = "_liquidityFee";

    public static final String FUNC__MAXSELLTRANSACTIONAMOUNT = "_maxSellTransactionAmount";

    public static final String FUNC__MAXWALLETTOKEN = "_maxWalletToken";

    public static final String FUNC__NUMTOKENSSELLTOADDTOLIQUIDITY = "_numTokensSellToAddToLiquidity";

    public static final String FUNC__REWARDFEE = "_rewardFee";

    public static final String FUNC__ROUTERADDRESS = "_routerAddress";

    public static final String FUNC__TAXFEE = "_taxFee";

    public static final String FUNC__TRANSFERCLAIMEDENABLED = "_transferClaimedEnabled";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BOUGHTBY = "boughtBy";

    public static final String FUNC_BOUGHTTOTAL = "boughtTotal";

    public static final String FUNC_CLAIM = "claim";

    public static final String FUNC_CLAIMED = "claimed";

    public static final String FUNC_CLEAN = "clean";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DECREASEALLOWANCE = "decreaseAllowance";

    public static final String FUNC_DELIVER = "deliver";

    public static final String FUNC_DOSWAPFORROUTER = "doSwapForRouter";

    public static final String FUNC_ENABLETRADING = "enableTrading";

    public static final String FUNC_EXCLUDEFROMFEE = "excludeFromFee";

    public static final String FUNC_EXCLUDEFROMREWARD = "excludeFromReward";

    public static final String FUNC_GETUNLOCKTIME = "getUnlockTime";

    public static final String FUNC_GETUNLOCKTIMEJANITOR = "getUnlockTimeJanitor";

    public static final String FUNC_INCLUDEINFEE = "includeInFee";

    public static final String FUNC_INCLUDEINREWARD = "includeInReward";

    public static final String FUNC_INCREASEALLOWANCE = "increaseAllowance";

    public static final String FUNC_ISCLEANED = "isCleaned";

    public static final String FUNC_ISEXCLUDEDFROMFEE = "isExcludedFromFee";

    public static final String FUNC_ISEXCLUDEDFROMREWARD = "isExcludedFromReward";

    public static final String FUNC_JANITOR = "janitor";

    public static final String FUNC_LOCK = "lock";

    public static final String FUNC_LOCKJANITOR = "lockJanitor";

    public static final String FUNC_MIGRATEROUTER = "migrateRouter";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PANCAKESWAPV2PAIR = "pancakeswapV2Pair";

    public static final String FUNC_PANCAKESWAPV2ROUTER = "pancakeswapV2Router";

    public static final String FUNC_PROGRESSIVEFEEENABLED = "progressiveFeeEnabled";

    public static final String FUNC_REFLECTIONFROMTOKEN = "reflectionFromToken";

    public static final String FUNC_RENOUNCEJANITORSHIP = "renounceJanitorship";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_REWARDS = "rewards";

    public static final String FUNC_SETDOSWAPFORROUTER = "setDoSwapForRouter";

    public static final String FUNC_SETLIQUIDITYFEEPROMILLE = "setLiquidityFeePromille";

    public static final String FUNC_SETMAXSELLPERCENT = "setMaxSellPercent";

    public static final String FUNC_SETNUMTOKENSSELLTOADDTOLIQUIDITY = "setNumTokensSellToAddToLiquidity";

    public static final String FUNC_SETPAIRADDRESS = "setPairAddress";

    public static final String FUNC_SETPROGRESSIVEFEEENABLED = "setProgressiveFeeEnabled";

    public static final String FUNC_SETROUTERADDRESS = "setRouterAddress";

    public static final String FUNC_SETSWAPANDLIQUIFYENABLED = "setSwapAndLiquifyEnabled";

    public static final String FUNC_SETTAXFEEPROMILLE = "setTaxFeePromille";

    public static final String FUNC_SETTRADINGENABLED = "setTradingEnabled";

    public static final String FUNC_SETTRANSFERCLAIMEDENABLED = "setTransferClaimedEnabled";

    public static final String FUNC_SETWHALEPROTECTIONENABLED = "setWhaleProtectionEnabled";

    public static final String FUNC_SWAPANDLIQUIFYENABLED = "swapAndLiquifyEnabled";

    public static final String FUNC_SWEEP = "sweep";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENFROMREFLECTION = "tokenFromReflection";

    public static final String FUNC_TOTALCLAIMED = "totalClaimed";

    public static final String FUNC_TOTALFEES = "totalFees";

    public static final String FUNC_TOTALREWARDS = "totalRewards";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRADINGENABLED = "tradingEnabled";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFERJANITORSHIP = "transferJanitorship";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNCLEAN = "unclean";

    public static final String FUNC_UNLOCK = "unlock";

    public static final String FUNC_UNLOCKJANITOR = "unlockJanitor";

    public static final String FUNC_WHALEPROTECTIONENABLED = "whaleProtectionEnabled";

    public static final Event ADDEDBNBREWARD_EVENT = new Event("AddedBNBReward", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DOSWAPFORROUTERENABLED_EVENT = new Event("DoSwapForRouterEnabled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event JANITORTRANSFERRED_EVENT = new Event("JanitorTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MINTOKENSBEFORESWAPUPDATED_EVENT = new Event("MinTokensBeforeSwapUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PROGRESSIVEFEEENABLED_EVENT = new Event("ProgressiveFeeEnabled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event SWAPANDLIQUIFY_EVENT = new Event("SwapAndLiquify", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SWAPANDLIQUIFYENABLEDUPDATED_EVENT = new Event("SwapAndLiquifyEnabledUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event TRADINGENABLED_EVENT = new Event("TradingEnabled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WHALEPROTECTIONENABLED_EVENT = new Event("WhaleProtectionEnabled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected TradingEnabledEventChecker(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TradingEnabledEventChecker(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TradingEnabledEventChecker(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TradingEnabledEventChecker(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AddedBNBRewardEventResponse> getAddedBNBRewardEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDEDBNBREWARD_EVENT, transactionReceipt);
        ArrayList<AddedBNBRewardEventResponse> responses = new ArrayList<AddedBNBRewardEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddedBNBRewardEventResponse typedResponse = new AddedBNBRewardEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.bnb = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddedBNBRewardEventResponse> addedBNBRewardEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddedBNBRewardEventResponse>() {
            @Override
            public AddedBNBRewardEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDEDBNBREWARD_EVENT, log);
                AddedBNBRewardEventResponse typedResponse = new AddedBNBRewardEventResponse();
                typedResponse.log = log;
                typedResponse.bnb = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddedBNBRewardEventResponse> addedBNBRewardEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDEDBNBREWARD_EVENT));
        return addedBNBRewardEventFlowable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<DoSwapForRouterEnabledEventResponse> getDoSwapForRouterEnabledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DOSWAPFORROUTERENABLED_EVENT, transactionReceipt);
        ArrayList<DoSwapForRouterEnabledEventResponse> responses = new ArrayList<DoSwapForRouterEnabledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DoSwapForRouterEnabledEventResponse typedResponse = new DoSwapForRouterEnabledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DoSwapForRouterEnabledEventResponse> doSwapForRouterEnabledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DoSwapForRouterEnabledEventResponse>() {
            @Override
            public DoSwapForRouterEnabledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DOSWAPFORROUTERENABLED_EVENT, log);
                DoSwapForRouterEnabledEventResponse typedResponse = new DoSwapForRouterEnabledEventResponse();
                typedResponse.log = log;
                typedResponse.enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DoSwapForRouterEnabledEventResponse> doSwapForRouterEnabledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DOSWAPFORROUTERENABLED_EVENT));
        return doSwapForRouterEnabledEventFlowable(filter);
    }

    public List<JanitorTransferredEventResponse> getJanitorTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(JANITORTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<JanitorTransferredEventResponse> responses = new ArrayList<JanitorTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            JanitorTransferredEventResponse typedResponse = new JanitorTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousJanitor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newJanitor = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<JanitorTransferredEventResponse> janitorTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, JanitorTransferredEventResponse>() {
            @Override
            public JanitorTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(JANITORTRANSFERRED_EVENT, log);
                JanitorTransferredEventResponse typedResponse = new JanitorTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousJanitor = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newJanitor = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<JanitorTransferredEventResponse> janitorTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(JANITORTRANSFERRED_EVENT));
        return janitorTransferredEventFlowable(filter);
    }

    public List<MinTokensBeforeSwapUpdatedEventResponse> getMinTokensBeforeSwapUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MINTOKENSBEFORESWAPUPDATED_EVENT, transactionReceipt);
        ArrayList<MinTokensBeforeSwapUpdatedEventResponse> responses = new ArrayList<MinTokensBeforeSwapUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MinTokensBeforeSwapUpdatedEventResponse typedResponse = new MinTokensBeforeSwapUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.minTokensBeforeSwap = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MinTokensBeforeSwapUpdatedEventResponse> minTokensBeforeSwapUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MinTokensBeforeSwapUpdatedEventResponse>() {
            @Override
            public MinTokensBeforeSwapUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MINTOKENSBEFORESWAPUPDATED_EVENT, log);
                MinTokensBeforeSwapUpdatedEventResponse typedResponse = new MinTokensBeforeSwapUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.minTokensBeforeSwap = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MinTokensBeforeSwapUpdatedEventResponse> minTokensBeforeSwapUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTOKENSBEFORESWAPUPDATED_EVENT));
        return minTokensBeforeSwapUpdatedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<ProgressiveFeeEnabledEventResponse> getProgressiveFeeEnabledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PROGRESSIVEFEEENABLED_EVENT, transactionReceipt);
        ArrayList<ProgressiveFeeEnabledEventResponse> responses = new ArrayList<ProgressiveFeeEnabledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProgressiveFeeEnabledEventResponse typedResponse = new ProgressiveFeeEnabledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProgressiveFeeEnabledEventResponse> progressiveFeeEnabledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProgressiveFeeEnabledEventResponse>() {
            @Override
            public ProgressiveFeeEnabledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PROGRESSIVEFEEENABLED_EVENT, log);
                ProgressiveFeeEnabledEventResponse typedResponse = new ProgressiveFeeEnabledEventResponse();
                typedResponse.log = log;
                typedResponse.enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProgressiveFeeEnabledEventResponse> progressiveFeeEnabledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROGRESSIVEFEEENABLED_EVENT));
        return progressiveFeeEnabledEventFlowable(filter);
    }

    public List<SwapAndLiquifyEventResponse> getSwapAndLiquifyEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SWAPANDLIQUIFY_EVENT, transactionReceipt);
        ArrayList<SwapAndLiquifyEventResponse> responses = new ArrayList<SwapAndLiquifyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SwapAndLiquifyEventResponse typedResponse = new SwapAndLiquifyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.bnb = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SwapAndLiquifyEventResponse> swapAndLiquifyEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SwapAndLiquifyEventResponse>() {
            @Override
            public SwapAndLiquifyEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SWAPANDLIQUIFY_EVENT, log);
                SwapAndLiquifyEventResponse typedResponse = new SwapAndLiquifyEventResponse();
                typedResponse.log = log;
                typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.bnb = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SwapAndLiquifyEventResponse> swapAndLiquifyEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SWAPANDLIQUIFY_EVENT));
        return swapAndLiquifyEventFlowable(filter);
    }

    public List<SwapAndLiquifyEnabledUpdatedEventResponse> getSwapAndLiquifyEnabledUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SWAPANDLIQUIFYENABLEDUPDATED_EVENT, transactionReceipt);
        ArrayList<SwapAndLiquifyEnabledUpdatedEventResponse> responses = new ArrayList<SwapAndLiquifyEnabledUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SwapAndLiquifyEnabledUpdatedEventResponse typedResponse = new SwapAndLiquifyEnabledUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SwapAndLiquifyEnabledUpdatedEventResponse> swapAndLiquifyEnabledUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SwapAndLiquifyEnabledUpdatedEventResponse>() {
            @Override
            public SwapAndLiquifyEnabledUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SWAPANDLIQUIFYENABLEDUPDATED_EVENT, log);
                SwapAndLiquifyEnabledUpdatedEventResponse typedResponse = new SwapAndLiquifyEnabledUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SwapAndLiquifyEnabledUpdatedEventResponse> swapAndLiquifyEnabledUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SWAPANDLIQUIFYENABLEDUPDATED_EVENT));
        return swapAndLiquifyEnabledUpdatedEventFlowable(filter);
    }

    public List<TradingEnabledEventResponse> getTradingEnabledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRADINGENABLED_EVENT, transactionReceipt);
        ArrayList<TradingEnabledEventResponse> responses = new ArrayList<TradingEnabledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradingEnabledEventResponse typedResponse = new TradingEnabledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.eanbled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TradingEnabledEventResponse> tradingEnabledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TradingEnabledEventResponse>() {
            @Override
            public TradingEnabledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRADINGENABLED_EVENT, log);
                TradingEnabledEventResponse typedResponse = new TradingEnabledEventResponse();
                typedResponse.log = log;
                typedResponse.eanbled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TradingEnabledEventResponse> tradingEnabledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADINGENABLED_EVENT));
        return tradingEnabledEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<WhaleProtectionEnabledEventResponse> getWhaleProtectionEnabledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WHALEPROTECTIONENABLED_EVENT, transactionReceipt);
        ArrayList<WhaleProtectionEnabledEventResponse> responses = new ArrayList<WhaleProtectionEnabledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WhaleProtectionEnabledEventResponse typedResponse = new WhaleProtectionEnabledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WhaleProtectionEnabledEventResponse> whaleProtectionEnabledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WhaleProtectionEnabledEventResponse>() {
            @Override
            public WhaleProtectionEnabledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WHALEPROTECTIONENABLED_EVENT, log);
                WhaleProtectionEnabledEventResponse typedResponse = new WhaleProtectionEnabledEventResponse();
                typedResponse.log = log;
                typedResponse.enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WhaleProtectionEnabledEventResponse> whaleProtectionEnabledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WHALEPROTECTIONENABLED_EVENT));
        return whaleProtectionEnabledEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> _liquidityFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__LIQUIDITYFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _maxSellTransactionAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__MAXSELLTRANSACTIONAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _maxWalletToken() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__MAXWALLETTOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _numTokensSellToAddToLiquidity() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__NUMTOKENSSELLTOADDTOLIQUIDITY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _rewardFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__REWARDFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> _routerAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__ROUTERADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> _taxFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__TAXFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> _transferClaimedEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__TRANSFERCLAIMEDENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> boughtBy(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BOUGHTBY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> boughtTotal() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BOUGHTTOTAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> claim(String recipient) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLAIM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> claimed(String recipient) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLAIMED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> clean(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLEAN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> decreaseAllowance(String spender, BigInteger subtractedValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DECREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(subtractedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deliver(BigInteger tAmount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELIVER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> doSwapForRouter() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DOSWAPFORROUTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> enableTrading() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ENABLETRADING, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    
    public RemoteFunctionCall<TransactionReceipt> customEnabledTradeCheckFunc(String funcName) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
        		funcName, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }
    
    
    public RemoteFunctionCall<TransactionReceipt> excludeFromFee(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXCLUDEFROMFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> excludeFromReward(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXCLUDEFROMREWARD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getUnlockTime() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUNLOCKTIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getUnlockTimeJanitor() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUNLOCKTIMEJANITOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> includeInFee(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCLUDEINFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> includeInReward(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCLUDEINREWARD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseAllowance(String spender, BigInteger addedValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(addedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isCleaned(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISCLEANED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isExcludedFromFee(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISEXCLUDEDFROMFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isExcludedFromReward(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISEXCLUDEDFROMREWARD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> janitor() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_JANITOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> lock(BigInteger time) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> lockJanitor(BigInteger time) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LOCKJANITOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> migrateRouter(String routerAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MIGRATEROUTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, routerAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> pancakeswapV2Pair() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PANCAKESWAPV2PAIR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> pancakeswapV2Router() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PANCAKESWAPV2ROUTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> progressiveFeeEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROGRESSIVEFEEENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> reflectionFromToken(BigInteger tAmount, Boolean deductTransferFee) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REFLECTIONFROMTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tAmount), 
                new org.web3j.abi.datatypes.Bool(deductTransferFee)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceJanitorship() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEJANITORSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> rewards(String recipient) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REWARDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setDoSwapForRouter(Boolean _enabled) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDOSWAPFORROUTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_enabled)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLiquidityFeePromille(BigInteger liquidityFee) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETLIQUIDITYFEEPROMILLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(liquidityFee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMaxSellPercent(BigInteger maxTxPercent) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMAXSELLPERCENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(maxTxPercent)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setNumTokensSellToAddToLiquidity(BigInteger numTokensSellToAddToLiquidity) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETNUMTOKENSSELLTOADDTOLIQUIDITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(numTokensSellToAddToLiquidity)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPairAddress(String pairAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPAIRADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, pairAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setProgressiveFeeEnabled(Boolean _enabled) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPROGRESSIVEFEEENABLED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_enabled)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRouterAddress(String routerAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETROUTERADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, routerAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSwapAndLiquifyEnabled(Boolean _enabled) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSWAPANDLIQUIFYENABLED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_enabled)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTaxFeePromille(BigInteger taxFee) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTAXFEEPROMILLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(taxFee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTradingEnabled(Boolean _enabled) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTRADINGENABLED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_enabled)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTransferClaimedEnabled(Boolean _enabled) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTRANSFERCLAIMEDENABLED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_enabled)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setWhaleProtectionEnabled(Boolean _enabled) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETWHALEPROTECTIONENABLED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_enabled)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> swapAndLiquifyEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SWAPANDLIQUIFYENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> sweep(String recipient) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SWEEP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenFromReflection(BigInteger rAmount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENFROMREFLECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(rAmount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalClaimed() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALCLAIMED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalFees() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALFEES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalRewards() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALREWARDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> tradingEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRADINGENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String sender, String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sender), 
                new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferJanitorship(String newJanitor) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERJANITORSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newJanitor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unclean(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNCLEAN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unlock() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNLOCK, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unlockJanitor() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNLOCKJANITOR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> whaleProtectionEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WHALEPROTECTIONENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static TradingEnabledEventChecker load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TradingEnabledEventChecker(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TradingEnabledEventChecker load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TradingEnabledEventChecker(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TradingEnabledEventChecker load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TradingEnabledEventChecker(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TradingEnabledEventChecker load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TradingEnabledEventChecker(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TradingEnabledEventChecker> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TradingEnabledEventChecker.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<TradingEnabledEventChecker> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TradingEnabledEventChecker.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TradingEnabledEventChecker> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TradingEnabledEventChecker.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TradingEnabledEventChecker> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TradingEnabledEventChecker.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AddedBNBRewardEventResponse extends BaseEventResponse {
        public BigInteger bnb;
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class DoSwapForRouterEnabledEventResponse extends BaseEventResponse {
        public Boolean enabled;
    }

    public static class JanitorTransferredEventResponse extends BaseEventResponse {
        public String previousJanitor;

        public String newJanitor;
    }

    public static class MinTokensBeforeSwapUpdatedEventResponse extends BaseEventResponse {
        public BigInteger minTokensBeforeSwap;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class ProgressiveFeeEnabledEventResponse extends BaseEventResponse {
        public Boolean enabled;
    }

    public static class SwapAndLiquifyEventResponse extends BaseEventResponse {
        public BigInteger tokens;

        public BigInteger bnb;
    }

    public static class SwapAndLiquifyEnabledUpdatedEventResponse extends BaseEventResponse {
        public Boolean enabled;
    }

    public static class TradingEnabledEventResponse extends BaseEventResponse {
        public Boolean eanbled;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class WhaleProtectionEnabledEventResponse extends BaseEventResponse {
        public Boolean enabled;
    }
}
